 <?php


/**
 * Implements hook_field_info().
 */
function alumni_field_school_field_info()
{
    //Allgemeine Informationen zum Feld
    return array(
        'alumni_school' => array(
            'label' => t('Schule Autosuche'),
            'description' => t('Schule Autosuche für Alumnis'),
            'default_widget' => 'alumni_school_widget',
            'default_formatter' => 'alumni_school_formatter',
        ),
    );
}

/**
 * Implements hook_field_is_empty().
 */
function alumni_field_school_field_is_empty($item, $field)
{
    //Überprüfen, ob in dem Feld etwas drin steht. Leer Felder sollen nicht in der Datenbank gespeichert werden
    return empty($item['alumni_school']);
}

/**
 * Implements hook_field_formatter_info().
 */
function alumni_field_school_field_formatter_info() {
    //Formatter für die Anzeige definieren
    return array(
        'alumni_school_formatter' => array(
            'label' => t('Standard'),
            'field types' => array('alumni_school'),
        ),
    );
}


/**
 * Implements hook_field_formatter_view().
 */
function alumni_field_school_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
    $element = array();

    //Ausgabe für die Anzeige erstellen
    switch ($display['type']) {
        case 'alumni_school_formatter':
            foreach ($items as $delta => $item) {
                $element[$delta] = array(
                    '#markup' => $item['alumni_school'],
                );
            }
            break;
    }

    return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function alumni_field_school_field_widget_info() {
    //Widgets für die Bearbeitungsform definieren
    return array(
        'alumni_school_widget' => array(
            'label' => t('Textfeld Autocomplete'),
            'field types' => array('alumni_school'),
        ),
    );
}



/**
 * Implements hook_field_widget_form().
 */
function alumni_field_school_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{

    //Widget für die Bearbeitungsform erstellen
    $value = isset($items[$delta]['alumni_school']) ? $items[$delta]['alumni_school'] : '';
    switch ($instance['widget']['type']) {
        case 'alumni_school_widget':
            //Textfeld für Auswahl einer Schule definieren. Das Textfeld verfügt über eine Autovervollständigung
            $element['alumni_school'] = array(
                '#type' => 'textfield',
                '#title' => $element['#title'],
                '#description' => $element['#description'],
                '#default_value' => $value,
                '#required' => $element['#required'],
                //Pfad zur Autovervollständigung, die per Ajax aufgerufen werden kann. Name des Content Types als Parameter mit übergeben, damit die
                //Suchfuntkion nur in Nodes des entsprechenden Content Types sucht
                '#autocomplete_path'=>'visitedschools/autocomplete/' . $field['settings']['content_type_select'],
                '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
                '#delta' => $delta,
            );
            break;
    }
    return $element;
}

/**
 * Implements hook_field_validate().
 */
function alumni_field_school_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors)
{
    //Validierungfunktion, die überprüft, ob die angegebene Schule auch in den Nodes Content Types vorhanden ist. Andernfalls wird eine Fehlermeldung ausgegeben
    foreach ($items as $delta => $item) {

        if (!empty($item['alumni_school'])) {

            $query = db_select('node', 'n');
            $query->fields('n', array('title'));
            $query->condition('n.title', $item['alumni_school'], '=');
            $query->range(0, 1);
            $result = $query->execute();

            if (!$result->fetchAssoc()) {
                $errors[$field['field_name']][$langcode][$delta][] = array(
                    'error' => 'alumni_school_invalid',
                    'message' => t('Angegebene Schule ist ungültig. Falls die Schule in der Liste nicht vorhanden ist, bitte eine Schule vorschlagen.'),
                );
            }
        }
    }
}

/**
 * Implements hook_field_widget_error().
 */
function alumni_field_school_field_widget_error($element, $error, $form, &$form_state)
{
    //Fehlermeldung ausgeben, wenn es in der Validierungsfunktion zu einem Fehler kommt
    switch ($error['error']) {
        case 'alumni_school_invalid':
            form_error($element, $error['message']);
            break;
    }
}

/**
 * Implements hook_field_settings_form().
 */
function alumni_field_school_field_settings_form($field, $instance, $has_data)
{
    //Form für settings_form erstellen, die bei der Konfiguration des Feldes angezeigt wird.
    $form = array();
    $options = array();

    //Alle Content Types laden und die Namen der Content Types im options Array für das Selectfeld speichern
    $types = node_type_get_types();

    foreach ($types as $type) {
        $options[$type->type] = $type->type;
    }

    $settings = $field['settings'];

    //Selectfeld zur Auswahl des Content Types
    $form['content_type_select'] = array(
        '#type' => 'select',
        '#title' => t('Inhaltstyp auswählen'),
        '#options' => $options,
        '#default_value' => isset($settings['content_type_select']) ? $settings['content_type_select'] : '',
        '#empty_option' => SELECT_DEFAULT,
        '#required' => TRUE,
    );

    return $form;
}

//Funktion zum Erzeugen des Links für die Autovervollständigung
function alumni_field_school_menu() {

    $items['visitedschools/autocomplete/%'] = array(
        'title' => '',
        'description' => '',
        'page callback' => 'visited_schools_autocomplete',
        //Definieren, wie viele Parameter übergeben werden
        'page arguments' => array(2),
        'access callback' => TRUE,
    );

    return $items;

}

//Funktion die per Ajax aufgerufen wird und für die Autovervollständigung die Daten in der Datenbank sucht
function visited_schools_autocomplete($type, $string) {

    //Eingegebenen String beim Leerzeichen aufsplitten, sodass nach jedem Wort einzeln gesucht werden kann
    $stringArr = preg_split('/ /', $string);

    $matches = array();

    //Datenbankabfrage, um nach passenden Einträgen im entsprechenden Content Type zu suchen
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.type', $type, '=');
    $query->condition('n.status', 1, '=');

    //Wörter des aufgesplitteten Suchstrings als Condition hinzufügen. So ist die Reihenfolge der eingegebenen Wörter irrelevant bei der Suche
    foreach ($stringArr as $string) {
        if (!empty($string)) {
            $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
        }
    }

    //Maximal 10 Resultate
    $query->range(0, 10);
    $result = $query->execute();

    //Gefundene Resultate im Array speichern und als JSON zurückgeben
    foreach ($result as $data) {
        $matches[check_plain($data -> title)] = check_plain($data -> title);
    }

    drupal_json_output($matches);
}