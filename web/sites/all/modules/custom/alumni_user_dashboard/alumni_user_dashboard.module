<?php

function alumni_user_dashboard_menu() {

    $items = array();

    //Tabelle erstellen, falls diese nicht existeirts
    $schema = alumni_user_dashboard_dbschema();
    if(!db_table_exists('alumni_user_dashboard')) {
        db_create_table('alumni_user_dashboard', $schema['alumni_user_dashboard']);
    }

    //Link für User Dashboard registrieren
    $items['user-dashboard'] = array(
        'title' => t('Dashboard'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('show_dashboard'),
        'access callback' => 'user_is_logged_in',
    );

    //Link zum Speichern der individuellen Konfiguration des Dashboards eines Benutzers
    $items['user-dashboard/config/save'] = array(
        'page callback' => 'save_dashboard_config',
        'type' => MENU_CALLBACK,
        'access callback' => 'user_is_logged_in',
    );

    $items['user-dashboard/get/job-offers'] = array(
        'page callback' => 'get_next_job_offers',
        'type' => MENU_CALLBACK,
        'access callback' => 'user_is_logged_in',
    );

    $items['user-dashboard/get/suggested-users'] = array(
        'page callback' => 'get_next_suggested_users',
        'type' => MENU_CALLBACK,
        'access callback' => 'user_is_logged_in',
    );

    return $items;

}

//Funktion, die per jQuery aufgerufen wird und die aktuelle Konfiguration des Benutzers vom Dashboard in der DB speichert
function save_dashboard_config() {

    global $user;
    //Json String in ein Array umwandeln
    $confArr = json_decode($_POST['content'], true);

    //Alte Konfiguration des Benutzers in der Datenbank löschen
    db_delete('alumni_user_dashboard')
        ->condition('user_id', $user->uid, '=')
        ->execute();

    //Array iterieren und die Konfiguration der einzelnen Blöcke vom Dashboard der Tabelle hinzufügen
    foreach ($confArr as $key => $value) {
        db_insert('alumni_user_dashboard')
            ->fields(array(
                'user_id' => $user->uid,
                'widget_name' => $key,
                'active' => $value['itemActive'] == 'true' ? 1 : 0,
                'position' => $value['itemPosition'],
            ))
            ->execute();
    }

    //Output definieren und als json String zurückgeben
    $output = array('status' => 'okay');

    drupal_json_output($output);
    drupal_exit();
}

function get_next_job_offers()
{

    global $user;
    //Json String in ein Array umwandeln
    $page = $_POST['page'];

    $start = $page*10-10;
    $end = $page*10+1;

    $resArray = getJobOffersList($user->uid, $start, $end);

    $html = '<div class="widget-job-offers">';
    $html .= $resArray['list'];

    if ($page != 1) {
        $html .= '<a href="#" class="btn back-btn">' . t('Zurück') . '</a>';
    }

    if ($resArray['count'] > 10) {
        $html .= '<a href="#" class="btn next-btn">' . t('Weiter') . '</a>';
    }
    $html .= '</div>';

    drupal_json_output($html);
    drupal_exit();
}

function get_next_suggested_users()
{

    global $user;
    //Json String in ein Array umwandeln
    $page = $_POST['page'];

    $start = $page*10-10;
    $end = $page*10+1;

    $resArray = getSuggestedUsersList($user->uid, $start, $end);

    $html = '<div class="widget-suggested-users">';
    $html .= $resArray['list'];

    if ($page != 1) {
        $html .= '<a href="#" class="btn back-btn">' . t('Zurück') . '</a>';
    }

    if ($resArray['count'] > 10) {
        $html .= '<a href="#" class="btn next-btn">' . t('Weiter') . '</a>';
    }
    $html .= '</div>';

    drupal_json_output($html);
    drupal_exit();
}

//Funktion zum Anzeigen des Dashboards
function show_dashboard($form, &$form_state) {

    //Variablen definieren
    $form = array();
    $widgetArr = array();
    global $user;

    //Pfad des Moduls holen, damit die CSS und JS Dateien richtig eingebunden werden können
    $path = drupal_get_path('module', 'alumni_user_dashboard');

    //Variablen werden später überprüft und je nachdem bekommt die Checkbox einen Haken oder nicht
    $jobOffersCheck = true;
    $suggestedUsersCheck = true;
    $item3Check = true;

    //Variable für Liste mit Stellenangeboten
    $jobOffersListHtml = '<div class="widget-job-offers">';

    $resArray = getJobOffersList($user->uid, 0, 11);
    $jobOffersListHtml .= $resArray['list'];

    if ($resArray['count'] > 10) {
        $jobOffersListHtml .= '<a href="#" class="btn next-btn">' . t('Weiter') . '</a>';
    }

    $jobOffersListHtml .= '</div>';


    $suggestedUsersListHtml = '<div class="widget-suggested-users">';

    $resArray = getSuggestedUsersList($user->uid, 0, 11);
    $suggestedUsersListHtml .= $resArray['list'];

    dpm($resArray['count']);
    if ($resArray['count'] > 10) {
        $suggestedUsersListHtml .= '<a href="#" class="btn next-btn">' . t('Weiter') . '</a>';
    }

    $suggestedUsersListHtml .= '</div>';

    //Einstellungen der Blöcke des Benutzers für das Dashboard aus Tabelle laden
    $query = db_select('alumni_user_dashboard', 'aud');
    $query->fields('aud', array('widget_name', 'active', 'position'));
    $query->condition('user_id', $user->uid,'=');
    $query->orderBy('position', 'ASC');
    $result = $query->execute();

    //Wenn keine Einstellungen bisher vorgenommen werden, dann die Widgets quasi auf Standard setzen. Ein Widget ist jeweils ein Block im Dashboard
    if ($result->rowCount() == 0) {
        $widgetArr[0] = array(
            'widget_name' => 'job-offers-item',
        );

        $widgetArr[1] = array(
            'widget_name' => 'suggested-users-item',
        );

        $widgetArr[2] = array(
            'widget_name' => 'item3-item',
        );
    } else {
        //Wenn ein Benutzer Einstellungen bereits gespeichert hat, alle Einstellungen der Widgets aus der Datenbank iterieren
        //Je nachdem welche Position das Widget beim Speichern hatte, wird es beim entsprechenden Array-Index hinzugefügt.
        //Somit muss später das Array nur noch von Anfang an durchlaufen werden, um die Widgets in der richtigen Reihenfolge auszugeben
        foreach ($result as $data) {
            $widgetArr[$data->position] = array(
                'widget_name' => $data->widget_name,
            );

            //Überprüfen, ob die Widgets als active in der DB gespeichert wurden. Je nachdem wird die Variable gesetzt und das Widget
            //wird später angezeigt oder ist ausgeblendet
            if ($data->widget_name == 'job-offers-item' && $data->active == 0) {
                $jobOffersCheck = false;
            }

            if ($data->widget_name == 'suggested-users-item' && $data->active == 0) {
                $suggestedUsersCheck = false;
            }

            if ($data->widget_name == 'item3-item' && $data->active == 0) {
                $item3Check = false;
            }

        }

    }

    //Variablen für die Sichtbarkeit der Widgets setzen
    $jobOffersVisibleHtml = $jobOffersCheck == true ? '' : ' style="display: none;"';
    $suggestedUsersVisibleHtml = $suggestedUsersCheck == true ? '' : ' style="display: none;"';
    $item3VisibleHtml = $item3Check == true ? '' : ' style="display: none;"';

    //Variablen für das Setzen der Haken bei den Checkboxen definieren
    $jobOffersCheckHtml = $jobOffersCheck == true ? ' checked' : '';
    $suggestedUsersCheckHtml = $suggestedUsersCheck == true ? ' checked' : '';
    $item3CheckHtml = $item3Check == true ? ' checked' : '';

    //Die einzelnen Widget zusammenbauen. $jobOffersVisibleHtml gibt dabei an, ob das Widget überhaupt sichtbar ist
    //Und in §jobOffersListHtml stehen die zum Benutzer passenden Stellenangebote. Die anderen Widgets sind analog aufgebaut.
    $jobOffersItemHtml = '
        <li class="widget-item" id="job-offers-item" check="job-offers-check"' . $jobOffersVisibleHtml . '>
            <fieldset>
                <legend><span class="fieldset-legend">' . t('Für dich empfohlene Stellenangebote') . '</span></legend>
                <div class="fieldset-wrapper">' . $jobOffersListHtml . '</div>
            </fieldset>
        </li>
    ';

    $suggestedUsersItemHtml = '
        <li class="widget-item" id="suggested-users-item" check="suggested-users-check"' . $suggestedUsersVisibleHtml . '>
            <fieldset>
                <legend><span class="fieldset-legend">' . t('Benutzer mit gleichen Interessen') . '</span></legend>
                <div class="fieldset-wrapper">' . $suggestedUsersListHtml . '</div>
            </fieldset>
        </li>
    ';

    $item3ItemHtml = '
        <li class="widget-item" id="item3-item" check="item3-check"' . $item3VisibleHtml . '>
            <fieldset>
                <legend><span class="fieldset-legend">' . t('Für dich empfohlenes Sonstiges') . '</span></legend>
                <div class="fieldset-wrapper">Item 3</div>
            </fieldset>
        </li>
    ';

    //Variable definieren. In dieser Variable steht der HTML Code von allen Widgets.
    $widgetHtml = '';

    //Das weiter oben definierte $widgetArr iterieren. Weiter oben wurden den Index-Positionen des Arrays die Namen der Widgets
    //hinzugefügt. Nun werden alle Einträge iteriert und je nachdem, ob die Überprüfung des widget_name übereinstimmend ist
    //wird der Variable der HTML Code des Widgets hinzugefügt. Somit stehen alle Widgets in der richtigen Reihenfolge in der Variablen
    foreach ($widgetArr as $widget) {
        if($widget['widget_name'] == 'job-offers-item') {
            $widgetHtml .= $jobOffersItemHtml;
        }

        if($widget['widget_name'] == 'suggested-users-item') {
            $widgetHtml .= $suggestedUsersItemHtml;
        }

        if($widget['widget_name'] == 'item3-item') {
            $widgetHtml .= $item3ItemHtml;
        }
    }

    //HTML Code für die Ausgabe zusammenbauen
    $html =
        '
        <div class="dashboard-list">
            <div class="dashboard-config-block">
                <span><b>' . t('Elemente anzeigen:') . '</b></span><br>
                <div class="dashboard-config-list">
                    <label class="check-dashboard-widgets"><input type="checkbox" id="job-offers-check" value="item1"' . $jobOffersCheckHtml . '>' . t('Stellenangebote') . '</label>
                    <label class="check-dashboard-widgets"><input type="checkbox" id="suggested-users-check" value="item2"' . $suggestedUsersCheckHtml . '>' . t('Vorgeschlagene Benutzer') . '</label>
                    <label class="check-dashboard-widgets"><input type="checkbox" id="item3-check" value="item3"' . $item3CheckHtml . '>Item 3</label>
                </div><br><br>
                <a href="#" class="save-dashboard-config btn">Speichern</a>
            </div>
            <div class="edit-dashboard-config"></div>
            <ul id="dashboard-sortable">
            ' . $widgetHtml . '      
            </ul>
        </div>';

    //Markup Element mit den CSS und JS Dateien und dem eigentlichen HTML Code definieren
    $form['user_dashboard'] = array(
        '#markup' => $html,
        '#attached' => array(
            'library' => array(
                array('system', 'ui.sortable'),
            ),
            'js' => array(
                "$path/js/dashboard.js",
                "$path/js/jquery.ui.touch-punch.min.js",
            ),
            'css' => array(
                "$path/css/dashboard.css",
            ),
        ),
    );

    //$form zurückgeben, damit diese gerendert wird
    return $form;
}

function getJobOffersList($user_id, $start, $end) {

    //Im Adminbereich definierte Systemnamen der Felder von Interessen im Benutzerprofil und in den Stellenangeboten auslesen
    //Diese werden zum joinen der Tabellen in der Datenbank benötigt, um die Einträge auszugeben, bei denen die Interessen übereinstimmen
    $userInterestsField = variable_get('aud_interests_user');
    $jobOffersInterestsField = variable_get('aud_interests_job_offers');

    $jobOffersListHtml = '';

    //Datenbankquery zusammenbauen. Tabellen mit dem Interesse des Benutzers und dem Interesse aus dem Stellenangebot werden miteinander gejoined
    //und die Tabelle node, damit alle Informationen für die passenden Stellenangebote im result zur Verfügung stehen
    $query = db_select('field_data_' . $userInterestsField, 'u');
    $query->distinct();
    $query->join('field_data_' . $jobOffersInterestsField, 'jo', 'u.' . $userInterestsField . '_tid = jo.' . $jobOffersInterestsField . '_tid');
    $query->join('node', 'n', 'jo.entity_id = n.nid');
    $query->fields('jo', array('entity_id'));
    $query->fields('n', array('title', 'created', 'changed'));
    $query->condition('u.entity_id', $user_id,'=');
    $query->condition('n.status', 1,'=');
    $query->orderBy('created', 'DESC');
    $query->range($start, $end);
    $result = $query->execute();

    $resArray = array(
        'count' => $result->rowCount(),
    );

    //Wenn es keine übereinstimmenden Stellenangebote mit den Interessen des Benutzers gibt entsprechende Meldung festlegen
    if ($result->rowCount() == 0) {
        $jobOffersListHtml .= '<p>' . t('Keine für dich empfohlenen Stellenangebote stehen zur Verfügung. Eventuell die Interessen im Nutzerprofil überprüfen.') . '</p>';
    } else {

        $counter = 1;
        //Alle Zeilen von result iterieren und der Variable ein widget-list-item mit jeweils einem passenden Stellenangebot hinzufügen
        foreach ($result as $data) {
            $jobOffersListHtml .= '
                <div class="widget-list-item">
                    <div class="item-title"><a href=" ' . base_path() . 'node/' . $data->entity_id . '" target="_blank">' . $data->title . '</a></div>
                    <div class="item-others"><b>' . t('Erstellt am:') . ' </b>' . date("d.m.Y - H:i", $data->created) . '</div>
                </div>
            ';

            $counter++;
            if ($counter > 10) {break;}
        }


    }

    $resArray['list'] = $jobOffersListHtml;
    return $resArray;
}


function getSuggestedUsersList($user_id, $start, $end) {
    $suggestedUsersListHtml = '';

    //Im Adminbereich definierte Systemnamen der Felder von Interessen im Benutzerprofil und in den Stellenangeboten auslesen
    //Diese werden zum joinen der Tabellen in der Datenbank benötigt, um die Einträge auszugeben, bei denen die Interessen übereinstimmen
    $userInterestsField = variable_get('aud_interests_user');

    //Pfad des Moduls holen, damit die CSS und JS Dateien richtig eingebunden werden können
    $path = drupal_get_path('module', 'alumni_user_dashboard');

    $subQuery = db_select('field_data_' . $userInterestsField, 'u2');
    $subQuery->fields('u2', array($userInterestsField . '_tid'));
    $subQuery->condition('u2.entity_id', $user_id, '=');

    $subQuery2 = db_select('user_relationships', 'ur');
    $subQuery2->fields('ur', array('requestee_id'));
    $subQuery2->condition('ur.requester_id', $user_id, '=');

    $query = db_select('field_data_' . $userInterestsField, 'u');
    $query->distinct();
    $query->join('users', 'us', 'u.entity_id = us.uid');
    $query->fields('u', array('entity_id'));
    $query->fields('us', array('name'));
    $query->condition('u.'. $userInterestsField . '_tid', $subQuery,'IN');
    $query->condition('u.entity_id', $subQuery2,'NOT IN');
    $query->condition('u.entity_id', $user_id,'!=');
    $query->orderBy('entity_id', 'DESC');
    $query->range($start, $end);
    $result = $query->execute();

    $resArray = array(
        'count' => $result->rowCount(),
    );

    if ($result->rowCount() == 0) {
        $suggestedUsersListHtml .= '<p>' . t('Keine Benutzer mit gleichen Interessen gefunden.') . '</p>';
    } else {

        $counter = 1;
        foreach ($result as $data) {

            $loadUser = user_load($data->entity_id);

            $pictureLink = '';
            if (is_object($loadUser->picture)) {
                $pictureLink = file_create_url($loadUser->picture->uri);
            } else {
                $pictureLink = $path . '/images/no_pic.jpg';
            }

            $suggestedUsersListHtml .= '
                <div class="widget-list-item">                                        
                    <div class="item-picture"><img src="' . $pictureLink . '" width="50px"></div>
                    <div class="item-name"><a href=" ' . base_path() . 'user/' . $data->entity_id . '" target="_blank">' . $data->name . '</a></div>
                </div>
            ';

            $counter++;
            if ($counter > 10) {break;}
        }

    }

    $resArray['list'] = $suggestedUsersListHtml;
    return $resArray;
}

//Definieren des Arrays für die Datenbanktabellen und der Spalten
function alumni_user_dashboard_dbschema()
{
    $schema = array();

    $schema['alumni_user_dashboard'] = array(
        'description' => 'The table for user dashboard',
        'fields' => array(
            'user_id' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0
            ),
            'widget_name' => array(
                'type' => 'varchar',
                'length' => 255,
                'default' => ''
            ),
            'active' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0
            ),
            'position' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0
            ),
        )
    );

    return $schema;
}