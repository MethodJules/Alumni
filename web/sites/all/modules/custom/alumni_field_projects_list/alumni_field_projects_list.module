<?php


/**
 * Implements hook_field_info().
 */
function alumni_field_projects_list_field_info()
{
    //Allgemeine Informationen zum Feld
    return array(
        'alumni_field_projects_list' => array(
            'label' => t('Liste mit JuFo Projekten'),
            'description' => t('Select Feld und Autosuche mit Auswahlliste für den Content Type von Projekten'),
            'default_widget' => 'alumni_field_projects_list_widget',
            'default_formatter' => 'alumni_field_projects_list_formatter',
        ),
    );
}

/**
 * Implements hook_field_is_empty().
 */
function alumni_field_projects_list_field_is_empty($item, $field)
{
    //Überprüfen, ob in beiden Feldern etwas drin steht. Leere Felder sollen nicht in der DB gespeichert werden
    return empty($item['alumni_field_filtered_list']) && empty($item['alumni_field_autocomplete_list']);
}

/**
 * Implements hook_field_formatter_info().
 */
function alumni_field_projects_list_field_formatter_info() {

    //Definieren, welche Formatter es für die Anzeige gibt
    return array(
        'alumni_field_projects_list_formatter' => array(
            'label' => t('Standard'),
            'field types' => array('alumni_field_projects_list')
        ),

    );
}


/**
 * Implements hook_field_formatter_view().
 */
function alumni_field_projects_list_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
    $element = array();

    //Für die einzelnen Formatter die Ausgabe für die Ansicht aufbauen
    switch ($display['type']) {
        case 'alumni_field_projects_list_formatter':
            //Jedes gespeicherte Item mit den Informationen aus der Datenbank iterieren
            foreach ($items as $delta => $item) {

                //Gespeicherte Node ID in Variable laden. Feld wird in der Widget Form definiert

                $nid = 0;

                if (!empty($item['alumni_field_filtered_list'])) {
                    $nid = $item['alumni_field_filtered_list'];
                }

                if (!empty($item['alumni_field_autocomplete_list'])) {
                    $nid = $item['alumni_field_autocomplete_list'];
                }

                //Titel der Node aus der Datenbank laden
                $query = db_select('node', 'n');
                $query->fields('n', array('title'));
                $query->condition('n.nid', $nid, '=');

                $result = $query->execute();
                $title = $result->fetchAssoc();

                //Ausgabelink definieren
                $element[$delta] = array(
                    '#markup' => '<a href="' . base_path() . 'node/' . $nid . '">' . $title['title'] . 'kkkkkkk</a>',
                );
            }
            break;

    }
    return $element;
}
/**
 * Implements hook_field_widget_info().
 */
function alumni_field_projects_list_field_widget_info() {

    //Definieren, welche Widgets es für die Formulare geben soll
    return array(
        'alumni_field_projects_list_widget' => array(
            'label' => t('Auswahlliste'),
            'field types' => array('alumni_field_projects_list'),
        ),
    );
}



/**
 * Implements hook_field_widget_form().
 */
function alumni_field_projects_list_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{
    //Hier werden für die Widgets die Formulare erzeugt, die beim Erstellen/Ändern eines Content Types gerendet werden

    switch ($instance['widget']['type']) {
        case 'alumni_field_projects_list_widget':

            //Settings aus dem Array in Variable laden. Settings werden in der Settings Form definiert
            $settings = $field['settings'];

            //Infos zum festgelegten Feld für die Vorfilterung (Fachbereich) laden
            $areaFieldInfo = field_info_field($settings['content_type_fields_select']);

            //Definieren, dass es sich um ein Fieldset handelt. Wird bei einem Feld anders definiert, als die FormAPI es vorgibt
            $element['#type'] = 'fieldset';

            //options für das Selectfeld sind die einzelnen Werte, die im Backend beim Content Type Projekte für das Feld der Vorfilterung eingetragen
            //wurden. In diesem Fall die Liste der Fachbereiche.
            $options = $areaFieldInfo['settings']['allowed_values'];

            $value = '';
            $visible = '';

            //Wenn bereits ein Projekt durch die Auswahlliste gespeichert wurde, Daten laden und in $value speichern
            if (!empty($items[$delta]['alumni_field_filtered_list'])) {
                $value = $items[$delta]['alumni_field_filtered_list'];
            }

            //Wenn bei gespeicherten Projekten die Daten aus der DB geladen werden, überprüfen, ob die Auswahlliste oder das Feld mit der
            //Autovervollständigung beim Speichern aktiviert war. Wenn die Autovervollständigung gerade aktiv war, soll beim Laden der Daten
            //die Auswahlliste ausgeblendet werden
            if (isset($items[$delta]['alumni_field_active_list']) && $items[$delta]['alumni_field_active_list'] == 'autocomplete-list') {
                $visible = 'display: none;';
            }

            //Selectfeld für die Vorfilterung definieren
            $element['alumni_field_projects_area_select'] = array(
                '#type' => 'select',
                '#title' => t('Fachbereich wählen'),
                '#default_value' => isset($items[$delta]['alumni_field_projects_area_select']) ? $items[$delta]['alumni_field_projects_area_select'] : '',
                '#empty_option' => SELECT_DEFAULT,
                '#options' => $options,
                '#required' => $element['#required'],
                '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
                '#delta' => $delta,
                '#prefix' => '<div class="normal-select-list" style="' . $visible . '">',

                //Ajax wrapper und Callback festlegen, der bei der Auswahl eines Fachbereichs aufgerufen wird
                '#ajax' => array(
                    'wrapper' => 'alumni-field-projects-list-' . $delta . '-wrapper',
                    'callback' => 'select_area_callback',
                    'method' => 'replace',
                    'effect' => 'fade',
                ),
            );


            $options = array();

            //Feldname wird für die Überprüfung benötigt, ob in alumni_Field_projects_area_select etwas drin steht
            $fieldName = $field['field_name'];
            $area = '';

            /*
             * Wenn die Callback-Funktion aufgerufen wird, wird die Widget Funktion quasi wieder aufgerufen, um die Form neu aufzubauen
             * Hier überprüfen, ob eine Vorfilterung des Fachbereichs stattgefunden hat. Wenn ja dann sollen im nächsten Schritt
             * nur die Projekte zum ausgewählten Fachbereich geladen werden
             */
            if (!empty($form_state['values'][$fieldName][$langcode][$delta]['alumni_field_projects_area_select'])) {
                $area = $form_state['values'][$fieldName][$langcode][$delta]['alumni_field_projects_area_select'];
            } else if (isset($items[$delta]['alumni_field_projects_area_select'])) {
                //Wenn Items existieren, also Projekte in der Datenbank gespeichert werden, dann sollen in dem Bearbeitungsformular die
                //bisherigen Daten aus der Datenbank angezeigt werden. Daher den gespeicherten Fachbereich auslesen und in Variable speichern
                $area = $items[$delta]['alumni_field_projects_area_select'];
            }

            /*
             * Wenn der Fachbereich nicht leer ist, also entweder gerade die gespeicherten Daten aus der Datenbank im Bearbeitungsformular
             * angezeigt werden sollen oder eine Vorfilterung des Fachbereichs im Selectfeld stattgefunden hat, sollen die dem Fachbereich
             * zugeordeneten Projekte in das Selectfeld geladen werden
             *
             */
            if (!empty($area)) {

                //Datenbankabfrage für die Projekte passend zum Fachbereich
                $query = db_select('node', 'n');
                $query->fields('n', array('title', 'nid'));
                $query->join('field_data_' . $settings['content_type_fields_select'], 'fd', 'n.nid = fd.entity_id');
                $query->condition('fd.' . $settings['content_type_fields_select'] . '_value', $area, '=');
                $query->condition('n.status', 1, '='); //nur veröffentliche Projekte
                $query->orderBy('title', 'ASC');

                $result = $query->execute();

                //Options-Array für das Selectfeld der Projekte erstellen
                foreach ($result as $data) {
                    $options[check_plain($data->nid)] = check_plain($data->title);
                }
            }

            //Selectfeld für die Projekte definieren
            $element['alumni_field_filtered_list'] = array(
                '#type' => 'select',
                '#title' => t('Projekt wählen'),
                '#description' => $element['#description'],
                '#default_value' => $value,
                '#empty_option' => SELECT_DEFAULT,
                '#options' => $options,
                '#required' => $element['#required'],
                '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
                '#delta' => $delta,
                //Um das Feld wird ein wrapper gelegt, der auch beim Ajax Bereich des Selectfelds für die Vorfilterung angegeben ist
                //Dieser div-Container wird nach der Auswahl eines Fachbereichs und dem Laden der Projekte mit dem neu definierten Selectfeld
                //überschrieben.
                '#prefix' => '<div id="alumni-field-projects-list-' . $delta . '-wrapper">',
                '#suffix' => '</div>',
            );

            //Link erzeugen, um zur Autovervollständigung zu wechseln
            $element['change_to_autocomplete_list'] = array(
                '#markup' => '<a href="#" class="change-to-autocomplete-list">' . t('Zur alternativen Suche mit Autovervollständigung') . '</a><br>',
                '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
                '#suffix' => '</div>',
            );


            $title = '';

            //Wenn ein Projekt bereits gespeichert wurde und die Autovervollständigung aktiv war, den Titel des Projekts aus der DB laden
            if (!empty($items[$delta]['alumni_field_autocomplete_list'])) {
                $query = db_select('node', 'n');
                $query->fields('n', array('title'));
                $query->condition('n.nid', $items[$delta]['alumni_field_autocomplete_list'], '=');
                $result = $query->execute();

                if ($result = $result->fetchAssoc()) {
                    $title = $result;
                }
            }

            //Wenn die Auswahlliste beim Speichern des Projekts aktiv war, dann soll die Autovervollständigung nach dem Laden der Daten aus
            // der DB nicht angezeigt werden
            $visible = '';
            if (!isset($items[$delta]['alumni_field_active_list']) || $items[$delta]['alumni_field_active_list'] == 'normal-select-list') {
                $visible = 'display: none;';
            }

            //Feld für die Autovervollständigung definieren
            $element['alumni_field_autocomplete_list'] = array(
                '#type' => 'textfield',
                '#title' => $element['#title'],
                '#description' => $element['#description'],
                '#default_value' => $title,
                '#required' => $element['#required'],
                //Der Pfad wird aufgerufen, sobald etwas in das Feld geschrieben wird. Dort werden dann passende Projekte rausgesucht und zurückgegeben
                '#autocomplete_path' => 'visitedprojects/autocomplete/' . $field['settings']['content_type_select'],
                '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
                '#delta' => $delta,
                '#prefix' => '<div class="autocomplete-list" style="' . $visible .'">',
            );

            //Link erzeugen, mit dem zur Auswahlliste gewechselt werden kann
            $element['change_to_normal_select_list'] = array(
                '#markup' => '<a href="#" class="change-to-normal-select-list">' . t('Zur Standard Suche mit Auswahlfeld') . '</a><br>',
                '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
                '#suffix' => '</div>',
            );

            //Verstecktes Feld definieren, in dem gespeichert wird welche Ansicht gerade aktiv ist. Diese wird zusammen mit dem ausgewähltem Projekt
            //in der DB gespeichert. Beim Laden der Seite soll bei bereits gespeicherten Projekten auch entweder die Auswahlliste oder die
            //Autovervollständigung standardmäßig aktiv sein und das andere ausgeblendet.
            $element['alumni_field_active_list'] = array(
                '#type' => 'hidden',
                '#default_value' => isset($items[$delta]['alumni_field_active_list']) ? $items[$delta]['alumni_field_active_list'] : 'normal-select-list',
                '#prefix' => '<div class="active-list">',
                '#suffix' => '</div>',
            );

            break;

    }

    return $element;
}

//Callback Funktion für die Vorfilterung der Fachbereiche
function select_area_callback($form, &$form_state){

    //Bei Aufruf der Funktion wird die Form neu erstellt. Da die Struktur der Arrays etwas anders ist als bei Callback Funktionen in
    //eigenen definierten Formularen, müssen hier aus dem form_state erst die Elternelemente des geklickten Elements ausgelesen werden.
    //Im form Array muss von Elternteil zum Kindteil gegangen werden, bevor man zum eigentlichen Element alumni_field_filtered_list gelangt
    $form_state['rebuild'] = TRUE;
    $parents = $form_state['triggering_element']['#array_parents'];
    array_pop($parents);
    $element = drupal_array_get_nested_value($form, $parents);

    //Von der neu erstellten Form das Feld alumni_field_filtered_list zurückgeben. Dieses Selectfeld wird dann mit dem im wrapper definiertem
    //div-Container überschrieben
    return $element['alumni_field_filtered_list'];
}

/**
 * Implements hook_field_presave().
 */
function alumni_field_projects_list_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items)
{
    /*
     * Vor dem Speichern überprüfen, welche Ansicht bei der Auswahl aktiv war. Wenn in der Auswahlliste bereits ein Projekt ausgewählt wurde,
     * anschließend aber zur Autovervollständigung gewechselt, ein Projekt ausgewählt und gespeichert wurde, soll das in der Auswahlliste
     * festgelegte Projekt nicht mit in der Datenbank gespeichert werden. Ebenso andersrum.
     */
    foreach ($items as $delta => $item) {
        //Wenn die Auswahlliste aktiv war, dann die Autovervollständigung leeren
        if ($item['alumni_field_active_list'] == 'normal-select-list'){
            $items[$delta]['alumni_field_autocomplete_list'] = '';
        }

        //Wenn die Autovervollständigung aktiv war, die Auswahlliste leeren
        if ($item['alumni_field_active_list'] == 'autocomplete-list') {
            $items[$delta]['alumni_field_filtered_list'] = '';
            $items[$delta]['alumni_field_projects_area_select'] = '';

            //In der Autovervollständigung stehen nur die Titel. In der DB soll aber die Node ID gespeichert werden, sodass
            //diese erst aus der DB geladen werden muss.
            $query = db_select('node', 'n');
            $query->fields('n', array('nid'));
            $query->condition('n.title', $item['alumni_field_autocomplete_list'], '=');
            $result = $query->execute();

            if ($result = $result->fetchAssoc()) {
                $items[$delta]['alumni_field_autocomplete_list'] = $result['nid'];
            }
        }
    }

}

/**
 * Implements hook_field_validate().
 */
function alumni_field_projects_list_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors)
{

    //Eingeloggten Benutzer laden
    global $user;
    $projectsArray = array();

    //Beim Speichern soll der Benutzer bei den ausgewählten Projekten als Projektmiglied hinterlegt werden
    //Alle ausgewählten Projekte, bzw. Items, iterieren
    foreach ($items as $delta => $item) {

        //Überprüfen, ob das ausgewählte Projekt so in der DB existiert, ansonsten eine Fehlermeldung ausgeben
        if (!empty($item['alumni_field_autocomplete_list'])) {

            $query = db_select('node', 'n');
            $query->fields('n', array('title'));
            $query->condition('n.title', $item['alumni_field_autocomplete_list'], '=');
            $query->range(0, 1);
            $result = $query->execute();

            if (!$result->fetchAssoc()) {
                $errors[$field['field_name']][$langcode][$delta][] = array(
                    'error' => 'alumni_project_invalid',
                    'message' => t('Angegebenens Projekt ist ungültig. Falls das Projekt in der Liste nicht vorhanden ist, bitte ein Projekt vorschlagen.'),
                );
            }
        }

        //Je nachdem welche Ansicht für die Auswahl des Projekts aktiv ist $nid mit der Node ID aus der aktiven Ansicht befüllen
        $nid = 0;
        if (!empty($item['alumni_field_projects_area_select']) && !empty($item['alumni_field_filtered_list']) && $item['alumni_field_active_list'] == 'normal-select-list') {
            $nid = $item['alumni_field_filtered_list'];
        }

        if (!empty($item['alumni_field_autocomplete_list']) && $item['alumni_field_active_list'] == 'autocomplete-list') {
            //In der Autovervollständigung stehen nur die Titel. In der DB soll aber die Node ID gespeichert werden, sodass
            //diese erst aus der DB geladen werden muss.
            $query = db_select('node', 'n');
            $query->fields('n', array('nid'));
            $query->condition('n.title', $item['alumni_field_autocomplete_list'], '=');
            $result = $query->execute();

            if ($result = $result->fetchAssoc()) {

                $nid = $result['nid'];
            }

        }

        //Wenn in $nid eine reale Node ID steht das Projekt in der Tabelle alumni_projects_access für die Mitgliederverwaltung in Projekten speichern
        if ($nid != 0) {

            //Dem Array die Node IDs der Projekte hinzufügen. Wird für die Überprüfung benötigt, ob der Benutzer Projekte aus
            //seinem Profil entfernt hat und die Projektzugehörigkeit ebenfalls entfernt werden soll
            $projectsArray[$nid] = $nid;

            //In der Datenbank abfragen, ob der Benutzer bereits dem Projekt zugeordnet ist und wenn nicht den Benutzer hinzufügen
            $query = db_select('alumni_projects_access', 'apc');
            $query->fields('apc', array('user_id'));
            $query->condition('apc.node_id', $nid, '=');
            $query->condition('apc.user_id', $user->uid, '=');

            $result = $query->execute();

            if (!$result->fetchAssoc()) {
                db_insert('alumni_projects_access')
                    ->fields(array(
                        'node_id' => $nid,
                        'user_id' => $user->uid,
                        'status' => 0,
                        'manager' => 0,
                    ))
                    ->execute();
            }
        }

    }

    //Alle Projekte, bei denen der Benutzer als Mitglied hinterlegt ist, aus der Datenbank laden
    $query = db_select('alumni_projects_access', 'apc');
    $query->fields('apc', array('node_id'));
    $query->condition('apc.user_id', $user->uid, '=');

    $result = $query->execute();

    //Überprüfen, ob der Benutzer eventuell Projekte aus seinem Nutzerprofil entfernt hat und wenn ja den Benutzer bei den
    //entsprechenden Projekten entfernen.
    foreach ($result as $data) {
        if (!array_key_exists($data->node_id, $projectsArray)) {
            db_delete('alumni_projects_access')
                ->condition('node_id', $data->node_id)
                ->condition('user_id', $user->uid)
                ->execute();
        }
    }


}

/**
 * Implements hook_field_widget_error().
 */
function alumni_field_project_field_widget_error($element, $error, $form, &$form_state)
{
    //Wenn in der Validierungsfunktion ein Fehler erzeugt wird, dann soll dieser angezeigt werden
    switch ($error['error']) {
        case 'alumni_project_invalid':
            form_error( $element, $error['message']);
            break;
    }
}

/**
 * Implements hook_field_settings_form().
 */
function alumni_field_projects_list_field_settings_form($field, $instance, $has_data)
{

    //Funktion definiert eine Form für Einstellungen bei der Erstellung eines Felds im Content Type
    $form = array();

    $options = array();

    //Alle Node Type, bzw Content Types laden
    $types = node_type_get_types();

    //options-Array für das Selectfeld aufbauen
    foreach ($types as $type) {
        $options[$type->type] = $type->type;
    }

    $settings = $field['settings'];

    //Selectfeld für die Auswahl eines Content Types definieren
    $form['content_type_select'] = array(
        '#type' => 'select',
        '#title' => t('Systemname des Content Types für Projekte'),
        '#options' => $options,
        '#default_value' => isset($settings['content_type_select']) ? $settings['content_type_select'] : '',
        '#empty_option' => SELECT_DEFAULT,
        '#required' => TRUE,
        //Ajax mit wrapper und Callback festlegen. Callback wird beim Auswählen eines Content Types aufgerunfen und der div-Container
        //mit dem wrapper als Klasse wird durch ein Selectfeld mit den Feldern (definieren welches Feld für die Vorfilterung des
        //Fachbereichs verwendet werden soll) des Content Types ersetzt.
        '#ajax' => array(
            'wrapper' => 'content-type-fields-select-wrapper',
            'callback' => 'select_content_type_callback',
            'method' => 'replace',
            'effect' => 'fade',
        ),

    );

    $optionsFields = array();

    //Beim Aufruf der Bearbeitungsform soll überprüft werden, ob in der Datenbank ein ausgewählter Content Type gespeichert wurde.
    //Wenn ja, dann alle Felder des Content Types laden und das options-Array für das Selectfeld content_type_fields_select vorbereiten
    if (!empty($settings['content_type_select'])) {
        $fieldsArray = field_info_instances('node', $settings['content_type_select']);

        foreach ($fieldsArray as $key => $value) {
            $optionsFields[$key] = $key;
        }
    }

    //Selectfeld mit Feldern des ausgewählten Content Types definieren
    $form['content_type_fields_select'] = array(
        '#type' => 'select',
        '#title' => t('Auswahl des Feldes für Vorfilterung'),
        '#description' => t('Der Benutzer muss zuerst den Bereich auswählen und bekommt anschließend nur Projekte, ' .
            'denen der Inhalt des Bereichs im Projekt enthalten ist. Kann auch leer gelassen werden, wenn keine Vorfilterung definiert werden soll'),
        '#options' => $optionsFields,
        '#default_value' => isset($settings['content_type_fields_select']) ? $settings['content_type_fields_select'] : '',
        '#empty_option' => SELECT_DEFAULT,
        //Da in der Callback-Funktion die options neu erstellt und dem Selectfeld zugewiesen werden, muss hier die Validierung übersprüngen
        //werden, da es sonst zu einer Fehlermeldung kommt, da Drupal die definierten Optionen abspeichert und später validiert, dass beim
        //Speichern auch ein gültiger Wert übergeben wurde. Normalerweise wird diese Validierung nicht übersprungen.
        '#validated' => TRUE,
        //div-Container wird von der Ajax Funktion beim Selectfeld des Content Types nach Auswahl und laden der Felder des Content
        //Types mit dem neu erstellten Selectfeld ersetzt
        '#prefix' => '<div id="content-type-fields-select-wrapper">',
        '#suffix' => '</div>',
    );

    return $form;
}

//Callback-Funktion für die Auswahl eines Content Types
function select_content_type_callback(&$form, &$form_state){
    $optionsFields = array();

    //Da in der settings form nicht auf das form_state Array zugregriffen werden kann, in dem der ausgewählte Content Type steht,
    //werden die Felder des Content Types in der Callback-Funktion geladen und im nachhinein dem Selectfeld zugewiesen.
    //Normalerweise würde dies in der Funktion geschehen, die die Form neu aufbaut, aber in diesem Fall geht es nicht und daher muss
    //bei dem Element, dass überschrieben werden soll, die Option #validated auf true stehen, da Drupal die definierten Optionen abspeichert
    //und beim Speichern der settings form überprüft, ob ein gültigert Wert übermittelt wurde.
    $fieldsArray = field_info_instances('node', $form_state['values']['field']['settings']['content_type_select']);

    //options-Array definieren
    foreach ($fieldsArray as $key => $value) {
        $optionsFields[$key] = $key;
    }

    //Neue options dem Selectfeld content_type_fields_select übergeben und der alte Inhalt des Selectfelds wird von der Ajax Funktion
    //mit dem neuen Selectfeld ersetzt.
    $form['field']['settings']['content_type_fields_select']['#options'] = $optionsFields;
    return $form['field']['settings']['content_type_fields_select'];
}


//Funktion zum Erzeugen der intern Links für Drupal
function alumni_field_projects_list_menu() {

    $items['visitedprojects/autocomplete/%'] = array(
        'title' => '',
        'description' => '',
        'page callback' => 'visited_projects_autocomplete',
        'page arguments' => array(2),
        'access callback' => TRUE,
    );

    return $items;

}

//Funktion wird aufgerufen, wenn in der Autovervollständigung etwas eingegeben wird. Der Suchstring wird in einzelne Wörter aufgeteilt und die Funktion
//gibt Ergebnisse zurück, in denen alle Wörter vorkommen. Dabei ist die Reihenfolge der Wörter nicht mehr relevant.
function visited_projects_autocomplete($type, $string) {

    $stringArr = preg_split('/ /', $string);

    $matches = array();

    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('n.type', $type, '=');
    $query->condition('n.status', 1, '=');

    foreach ($stringArr as $string) {
        if (!empty($string)) {
            $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
        }
    }

    $query->range(0, 10);
    $result = $query->execute();

    foreach ($result as $data) {
        $matches[check_plain($data -> title)] = check_plain($data -> title);
    }

    drupal_json_output($matches);
}


